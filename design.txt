部署思路：
=============================================================================
1、host准备
根据tbl_host表，对host进行相关操作，主要是环境初始化，必要软件安装，工作账号创建

2、cluster部署
以cluster为单位进行部署, 到cluster所在机器下载安装包，解压
./admin.sh cfg 生成进程配置
根据tbl_server生成.clusterrc进程配置:
    clusterlayer clusterid  server startidx   endidx   portbase
admin.sh来管理进程
    ./bin/xxx -i idx -p port -d clusterid
    进程启动后根据servername去t_server_conf去读进程配置

3、DB部署
shell脚本来实现
根据tbl_db_create表，依次创建所有的表
每个表host连过去，-h host -u user -p -P 
根据tablename找到对应的建表sql文件, 根据dbname,tablename,index替换建表语句中的字段, 执行sql


db的统一访问，考虑大区，分区，合服问题
进程配置，配置中心化
rpc动态路由
db路由怎么做?


程序实现：
=============================================================================
1、加解密：非对称加密，DH秘钥交换, 具体加解密(base64, rsa), 公钥传输(防止中间人攻击)
2、配置中心的实现: 百度disconf思路，携程apollo思路


微服务化：
* 服务注册，服务提供方将自己调用地址注册到服务注册中心，让服务调用方能够方便地找到自己。
* 服务发现，服务调用方从服务注册中心找到自己需要调用的服务的地址。
* 负载均衡，服务提供方一般以多实例的形式提供服务，负载均衡功能能够让服务调用方连接到合适的服务节点。并且，节点选择的工作对服务调用方来说是透明的。
* 服务网关，服务网关是服务调用的唯一入口，可以在这个组件是实现用户鉴权、动态路由、灰度发布、A/B测试、负载限流等功能。
* 配置中心，将本地化的配置信息（properties, xml, yaml等）注册到配置中心，实现程序包在开发、测试、生产环境的无差别性，方便程序包的迁移。
* API管理，以方便的形式编写及更新API文档，并以方便的形式供调用者查看和测试。
* 集成框架，微服务组件都以职责单一的程序包对外提供服务，集成框架以配置的形式将所有微服务组件（特别是管理端组件）集成到统一的界面框架下，让用户能够在统一的界面中使用系统。
* 分布式事务，对于重要的业务，需要通过分布式事务技术（TCC、高可用消息服务、最大努力通知）保证数据的一致性。
* 调用链，记录完成一个业务逻辑时调用到的微服务，并将这种串行或并行的调用关系展示出来。在系统出错时，可以方便地找到出错点。
* 支撑平台，系统微服务化后，系统变得更加碎片化，系统的部署、运维、监控等都比单体架构更加复杂，那么，就需要将大部分的工作自动化。现在，可以通过Docker等工具来中和这些微服务架构带来的弊端。 例如持续集成、蓝绿发布、健康检查、性能健康等等。严重点，以我们两年的实践经验，可以这么说，如果没有合适的支撑平台或工具，就不要使用微服务架构。
